generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
  CLIENT
  INDIVIDUALCLIENT
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String         @default("slug")
  email         String         @unique
  phone         String
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  plan          String?
  password      String
  accounts      Account[]
  sessions      Session[]
  symptomIds    String[]
  doctorProfile DoctorProfile?
  clientProfile ClientProfile?

  serviceId String?  @db.ObjectId
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  specialityId String?     @db.ObjectId
  speciality   Speciality? @relation(fields: [specialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  isVerfied               Boolean                  @default(false)
  token                   Int
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  IndividualClientProfile IndividualClientProfile?
}

enum ClientStatus {
  PENDING
  APPROVED
}

model IndividualClientProfile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @unique @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         ClientStatus @default(PENDING)
  trackingNumber String       @unique

  fullName String?
  email    String?
  phone    String?
  address  String?

  nextOfKinName String?
  nextOfKinNumber String?

  proofOfAddress String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ClientProfile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @unique @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         ClientStatus @default(PENDING)
  trackingNumber String       @unique

  name                      String?
  companyNumber String?
  cqcNumber                 String?
  organisationType          String?

  companyLogo    String?
  bio            String?

  email   String?
  website String?
  phone   String?
  city    String?
  address String?

  employersLiability String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}



enum DoctorStatus {
  PENDING
  APPROVED
  REJECTED
}

model DoctorProfile {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  userId               String        @unique @db.ObjectId
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status               DoctorStatus  @default(PENDING)
  trackingNumber       String        @unique
  firstName            String
  lastName             String
  middleName           String?
  dob                  DateTime?
  gender               String?
  page                 String?
  availability         Availability?
  profilePicture       String?
  bio                  String?
  medicalLicense       String?
  medicalLicenseExpiry DateTime?
  yearsOfExperience    Int?

  email             String?
  phone             String?
  city              String?
  state             String?
  address           String?
  profession        String?
  otherSpecialties  String[]
  boardCertificates String[]
  servicesOffered   String[]
  accomplishments   String?
  refereeEmail      String?
  refereeName       String?
  refereeNumber     String?

  additionalDocs String[]
  operationMode  String?  @default("Telehealth visit")
  hourlyWage     Int      @default(15)

  deductTaxBeforePayment Boolean @default(true) // New field
  band                   String?

  //SERVICES
  serviceId   String?     @db.ObjectId
  service     Service?    @relation(fields: [serviceId], references: [id])
  specialtyId String?     @db.ObjectId
  specialty   Speciality? @relation(fields: [specialtyId], references: [id])
  symptomIds  String[]    @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Availability {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  doctorProfileId String        @unique @db.ObjectId
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday          String[]
  tuesday         String[]
  wednesday       String[]
  thursday        String[]
  friday          String[]
  saturday        String[]
  sunday          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model BlogPost {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  content     String?
  image       String
  categories  String[]
  lastUpdated String
  publishedAt DateTime?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title          String
  slug           String          @unique
  imageUrl       String
  doctorProfiles DoctorProfile[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Speciality {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title          String
  slug           String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  doctorProfiles DoctorProfile[]
}

model Symptom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inbox {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  recieverId  String
  senderId    String
  senderName  String
  senderEmail String
  subject     String
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AppointmentStatus {
  pending
  rejected
  approved
  completed
}

enum PaymentStatus {
  pending
  paid
  refunded
  failed
}

model Appointment {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted              Boolean   @default(false)
  appointmentDate          DateTime?
  appointmentFormattedDate String
  doctorId                 String
  doctorName               String?
  patientId                String
  charge                   Int
  appointmentTime          String?
  totalHours               Int?

  // New fields
  reference     String?
  paymentStatus PaymentStatus @default(pending)

  // Existing fields
  actualStartTime  DateTime?
  actualFinishTime DateTime?
  actualHours      Float?
  finalCharge      Int?

  // Patient details
  firstName         String?
  lastName          String?
  gender            String?
  phone             String?
  email             String?
  companyName       String?
  location          String?
  appointmentReason String?
  medicalDocuments  String[]
  occupation        String?
  status            AppointmentStatus @default(pending)
  meetingLink       String            @default("")
  meetingProvider   String            @default("zoom")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
